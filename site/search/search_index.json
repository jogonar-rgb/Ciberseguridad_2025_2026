{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"warm/","title":"Apuntes y ejercicios pr\u00e1cticas del curso de especializaci\u00f3n ciberseguridad","text":"<p>Apuntes, pr\u00e1cticas y ejercicios del curso de especializaci\u00f3n de Ciberseguridad en el IES Severo Ochoa (Elche).</p> <p>Los ejercicios y conocimientos contenidos en las pr\u00e1cticas y/o apuntes de  todos los m\u00f3dulos tienen exclusivamente prop\u00f3sito formativo, por lo que  nunca se deber\u00e1n utilizar con fines maliciosos o delictivos.</p> <p>Ning\u00fan alumno o alumna de este curso, ni profesor o profesora como  docentes, ser\u00e1n responsables de los da\u00f1os directos o indirectos que  pudieran derivarse del uso inadecuado de las herramientas y mecanismos  expuestos.</p>"},{"location":"warm/Apuntes_Linux/","title":"Conceptos b\u00e1sicos entornos Linux","text":"<p>En estos primeros pasos veremos algunos conceptos muy b\u00e1sicos que es necesario dominar previo a adquirir cualquier conocimiento relativo a la seguridad de sistemas.</p> <p>Estas nociones b\u00e1sicas nos dar\u00e1n las herramientas principales para desenvolvernos dentro de un sistema y entender los principios de ciberseguridad que se presentar\u00e1n con posterioridad.</p>"},{"location":"warm/Apuntes_Linux/#estructura-de-ficheros","title":"Estructura de ficheros","text":"<p>Un sistema de archivos, llamado com\u00fanmente File System o FS, determina la organizaci\u00f3n de los datos en un soporte de almacenamiento, y por tanto, c\u00f3mo gestiona y organiza el sistema operativo los archivos. </p> <p>Linux es, como todo Unix, un sistema operativo completamente orientado a archivos. Se representa todo (o casi todo) con un archivo, tanto los datos (archivos de datos de cualquier tipo, como una imagen o un programa) como los perif\u00e9ricos (terminales, ratones, teclado, tarjeta sonido, etc.) o incluso los medios de comunicaci\u00f3n (sockets, tuber\u00edas nombradas, etc.). Se puede decir que el sistema de archivos es el coraz\u00f3n de cualquier sistema Unix.</p> <p>Un archivo es una entidad que almacena datos y programas. Se compone de contenido y metadatos (tama\u00f1o del archivo, propietario, fecha de creaci\u00f3n, permisos). Los archivos est\u00e1n organizados en directorios. Un directorio es un archivo que almacena otros archivos.</p> <p>Los diferentes tipos de archivos incluyen:</p> <ul> <li> <p>Archivos regulares que almacenan datos y programas.</p> </li> <li> <p>Directorios que contienen otros archivos.</p> </li> <li> <p>Archivos especiales que se utilizan para entrada y salida.</p> </li> </ul> <p>Todo en Linux es un archivo, por lo que saber c\u00f3mo manipularlos es muy importante. As\u00ed pues, en la secci\u00f3n correspondiente, veremos las operaciones b\u00e1sicas con archivos mediante el terminal.</p> <p>La estructura de los directorios de Linux, as\u00ed como su contenido y funciones, viene definida en el denominado Filesystem Hierarchy Standard o FHS por sus siglas en ingl\u00e9s, que en otras palabras viene a ser el est\u00e1ndar de jerarqu\u00eda para los sistemas de archivos en sistemas Linux y otros derivados de UNIX.</p> <p>Como pod\u00e9is ver en la siguiente imagen, todo el \u00e1rbol de parte de una ra\u00edz com\u00fan denominada root y que se simboliza por una barra inclinada. A\u00fan as\u00ed, esto no significa que varios de ellos no puedan estar en particiones separadas del resto. De hecho, en muchas distros GNU/Linux es una pr\u00e1ctica muy com\u00fan el hecho ubicar ciertos directorios en particiones separadas del resto.</p> <p></p> <p>La FHS distingue entre lo que ser\u00edan directorios est\u00e1ticos, que son aquellos que contienen binarios, bibliotecas, documentaci\u00f3n, etc., de los din\u00e1micos, que son aquellos que requieren de acciones m\u00e1s a menudo, tales como copias de seguridad, etc.</p> <p>Tambi\u00e9n podemos diferencias claramente lo que son los directorios compartibles, que significa que contienen ficheros que pueden utilizarse desde otros dispositivos, de los no compartibles, que solo pueden utilizarse desde el dispositivo en el que se encuentran.</p>"},{"location":"warm/Apuntes_Linux/#directorio-raiz-o","title":"Directorio ra\u00edz o \"/\"","text":"<p>Toda la estructura de directorios en los sistemas basados en UNIX parte de un directorio ra\u00edz tambi\u00e9n llamado directorio root y que se simboliza por una barra inclinada o /. De este directorio, es desde donde nacen todo el resto de directorios, independientemente que est\u00e9n almacenados f\u00edsicamente en discos o unidades separadas.</p> <p>Cualquier direcci\u00f3n de archivo o carpeta en Linux empieza por el directorio ra\u00edz o /, seguido de todos los directorios y subdirectorios que que lo contienen, separados cada uno de ellos por /.</p> <p></p> <p>A continuaci\u00f3n conocer\u00e1s con m\u00e1s en detalle a todos los directorios principales que parten del directorio ra\u00edz, junto con sus subdirectorios m\u00e1s importantes y los ficheros que suelen contener.</p>"},{"location":"warm/Apuntes_Linux/#directorios-bin-sbin","title":"Directorio/s bin, sbin","text":"<p>El directorio /bin es un directorio est\u00e1tico y es donde se almacenan todos los binarios necesarios para garantizar las funciones b\u00e1sicas a nivel de usuario. Solo almacena los ejecutables de usuario, ya que los binarios necesarios para tareas administrativas gestionadas por el usuario root o superusuario del sistema se encuentran en el directorio /sbin.</p> <p>Incluye tambi\u00e9n los binarios que permiten la ejecuci\u00f3n de varias utilidades est\u00e1ndar de la terminal de Linux, concretamente cat, cd, cp, echo, grep, gzip, kill, ls, mv, rm, ping, su, ps, tar y vi.</p> <p>El directorio /sbin hace lo mismo pero para los binarios relativos tareas propias del sistema operativo, y que solamente pueden ser gestionadas por el usuario root, tales como el arranque, tareas de restauraci\u00f3n, reparaci\u00f3n, etc.</p>"},{"location":"warm/Apuntes_Linux/#directorio-boot","title":"Directorio /boot","text":"<p>Es un directorio est\u00e1tico y contiene los archivos necesarios para arrancar el sistema. Los archivos del cargador de arranque GRUB y los kernels de Linux se almacenan aqu\u00ed, por ejemplo. Sin embargo, los archivos de configuraci\u00f3n del cargador de arranque no se encuentran aqu\u00ed, est\u00e1n en <code>/etc</code> con los otros archivos de configuraci\u00f3n.</p> <p>A la hora de instalar el sistema es importante prever bien el espacio que se le vaya a dar a la partici\u00f3n, ya que a la larga, con la acumulaci\u00f3n de diferentes actualizaciones del Kernel, es com\u00fan que se quede sin espacio. Si esto sucede, se pueden tener problemas a la hora de instalar futuras actualizaciones del n\u00facleo, y ser\u00e1 necesario hacer limpieza de versiones antiguas del kernel.</p>"},{"location":"warm/Apuntes_Linux/#directorio-dev","title":"Directorio /dev","text":"<p>Este directorio incluye todos los dispositivos de almacenamiento, en forma de archivos especiales, conectados al sistema. Es decir, cualquier disco duro, partici\u00f3n, memoria USB, o CDROM conectado al sistema y que el sistema pueda entender como un volumen l\u00f3gico de almacenamiento.</p> <p>Siendo esto as\u00ed, ver\u00e9is que la ruta en la que se encuentra cualquier volumen (partici\u00f3n o dispositivo externo) conectado al sistema siempre empieza por /dev.</p> <p>Este es el directorio que contiene, por decirlo de alg\u00fan modo, la informaci\u00f3n de cada uno de los vol\u00famenes, a diferencia del directorio <code>/media</code>, que veremos m\u00e1s adelante, que lo que contiene son solo los puntos de montaje, pero no la informaci\u00f3n real de estos vol\u00famenes.</p> <p>Para ver esto en la pr\u00e1ctica, si abres una ventana de terminal y ejecutas el comando sudo <code>fdisk -l</code>, ver\u00e1s la estructura de particiones de tu sistema. En una instalaci\u00f3n t\u00edpica de cualquier distro GNU/Linux suele ser la siguiente:</p> <pre><code>/dev/sda1 - Partici\u00f3n principal\n/dev/sda2 - Partici\u00f3n extendida \n/dev/sda5 - Partici\u00f3n Swap\n</code></pre> <p>Estos no son archivos reales como los conocemos, pero aparecen como archivos; por ejemplo, <code>/dev/sda</code> representa la primera unidad SATA del sistema.</p> <p>Eso en cuanto a particiones. Si se trata de un dispositivo externo, el volumen estar\u00e1 igualmente dentro de /dev, pero en este caso var\u00eda el nombre que el sistema le asigna a dicho volumen. Generalmente la estructura suele ser la siguiente (ejecutando nuevamente el comando sudo fdisk -l con un dispositivo externo conectado puede comprobarse).</p> <pre><code>/dev/sdb1\n/dev/sdb2\n/dev/sdb3\n...\n</code></pre> <p>Este directorio tambi\u00e9n contiene pseudodispositivos, que son dispositivos virtuales que en realidad no se corresponden con el hardware. Por ejemplo, <code>/dev/random</code> produce n\u00fameros aleatorios. Otro ejemplo ser\u00eda el de <code>/dev/null</code>, un dispositivo especial que no produce salida y descarta autom\u00e1ticamente todas las entradas; cuando canaliza la salida de un comando a <code>/dev/null</code>, la descarta.</p>"},{"location":"warm/Apuntes_Linux/#directorio-etc","title":"Directorio /etc","text":"<p>El directorio <code>/etc</code> contiene archivos de configuraci\u00f3n, que generalmente se pueden editar a mano en un editor de texto. Se debe tener en cuenta que el directorio <code>/etc</code> contiene archivos de configuraci\u00f3n de todo el sistema, adem\u00e1s de las aplicaciones y programas instaladas posteriormente; los archivos de configuraci\u00f3n espec\u00edficos del usuario se encuentran en el directorio de inicio de cada usuario.</p> <p>Es un directorio que deber\u00eda contener \u00fanicamente ficheros de configuraci\u00f3n, y no deber\u00eda contener binarios.</p>"},{"location":"warm/Apuntes_Linux/#directorio-lib","title":"Directorio lib","text":"<p>Incluye las bibliotecas esenciales que son necesarias para que se puedan ejecutar correctamente todos los binarios que se encuentran en los directorios <code>/bin</code> y <code>/sbin</code>, as\u00ed como los m\u00f3dulos del propio kernel.</p> <p>En los sistemas operativos de 64 bits, adem\u00e1s de <code>/lib</code> existe otro directorio denominado <code>/lib64</code>, referida a las bibliotecas para aplicaciones de 64 bits.</p>"},{"location":"warm/Apuntes_Linux/#directorio-media","title":"Directorio media","text":"<p>Representa el punto de montaje de todos los vol\u00famenes l\u00f3gicos que se montan temporalmente. Es decir, El directorio <code>/media</code> contiene subdirectorios donde se montan los dispositivos de medios extra\u00edbles insertados en el ordenador.</p> <p>En la mayor\u00eda de distribuciones GNU/Linux, desde hace ya alg\u00fan tiempo, cada vez que se monta una unidad externa, partici\u00f3n, etc., esta se monta dentro del directorio /media y a su vez dentro de un directorio especifico dependiendo del usuario del sistema que monta el volumen.</p> <p>De este modo, si en un sistema hay varios usuarios, pongamos User1 y User2, los puntos de montaje de los vol\u00famenes que montan cada uno de ellos se mostraran en directorios separados tal como as\u00ed:</p> <pre><code>/media/User1\n/media/User2\n</code></pre>"},{"location":"warm/Apuntes_Linux/#directorio-opt","title":"Directorio opt","text":"<p>El directorio <code>/opt</code> contiene subdirectorios para paquetes de software opcionales. Es com\u00fanmente utilizado por software propietario que no obedece a la jerarqu\u00eda del sistema de archivos est\u00e1ndar; por ejemplo, un programa propietario puede volcar sus archivos en <code>/opt/NombreAplicacion</code> cuando se instala.</p> <p>Antiguamente se sol\u00eda utilizar el directorio <code>mnt</code> para estas funciones, pero actualmente, la mayor\u00eda de distribuciones hacen uso de media.</p>"},{"location":"warm/Apuntes_Linux/#directorio-proc","title":"Directorio proc","text":"<p>Este directorio contiene informaci\u00f3n de los procesos y aplicaciones que se est\u00e1n ejecutando en un momento determinado en el sistema, pero realmente no guarda nada como tal, ya que lo que almacena son archivos virtuales, por lo que el contenido de este directorio es nulo.</p>"},{"location":"warm/Apuntes_Linux/#directorio-root","title":"Directorio /root","text":"<p>El directorio <code>/root</code> es el directorio de inicio del usuario root. En lugar de estar ubicado en <code>/home/root</code>, est\u00e1 ubicado en <code>/root</code>. Es distinto de <code>/</code>, que es el directorio ra\u00edz del sistema.</p>"},{"location":"warm/Apuntes_Linux/#directorio-tmp","title":"Directorio tmp","text":"<p>Las aplicaciones almacenan archivos temporales en el directorio <code>/tmp</code>. Estos archivos generalmente se eliminan cada vez que se reinicia su sistema y pueden ser eliminados en cualquier momento por utilidades como tmpwatch.</p> <p>Las aplicaciones programadas para almacenar archivos en este directorio deben asumir que solo ser\u00e1n recuperables en la sesi\u00f3n actual. En este sentido, hay otro subdirectorio, <code>/var/tmp</code>, dispuesto igualmente para el almacenamiento de archivos temporales, pero cuyo contenido no se borra de forma autom\u00e1tica tras el reinicio del sistema.</p>"},{"location":"warm/Apuntes_Linux/#directorio-usr","title":"Directorio <code>usr</code>","text":"<p>El directorio <code>/usr</code> contiene aplicaciones y archivos utilizados por los usuarios, a diferencia de las aplicaciones y archivos utilizados por el sistema,  incluyendo todo el software instalado a trav\u00e9s de los gestores de paquetes de cada distribuci\u00f3n. Por ejemplo, las aplicaciones no esenciales se encuentran dentro del directorio <code>/usr/bin</code> en lugar del directorio <code>/bin</code> y los binarios de administraci\u00f3n del sistema no esenciales se encuentran en el directorio <code>/usr/sbin</code> en lugar del directorio <code>/sbin</code>. Las bibliotecas para cada uno se encuentran dentro del directorio <code>/usr/lib</code>. El directorio <code>/usr</code> tambi\u00e9n contiene otros directorios; por ejemplo, los archivos independientes de la arquitectura, como los gr\u00e1ficos, se encuentran en <code>/usr/share</code>:</p> <pre><code>/usr/bin\n/usr/include\n/usr/lib\n/usr/local\n/usr/sbin\n/usr/share\n/usr/src\n</code></pre> <p>El directorio <code>/usr/local</code> es donde se instalan las aplicaciones compiladas localmente de forma predeterminada; esto evita que arruinen el resto del sistema</p>"},{"location":"warm/Apuntes_Linux/#directorio-var","title":"Directorio var","text":"<p>Este directorio contiene varios archivos con informaci\u00f3n del sistema, como archivos de logs, emails de los usuarios del sistema, bases de datos, informaci\u00f3n almacenada en la cach\u00e9 o informaci\u00f3n relativa a los paquetes de aplicaciones almacenados en <code>/opt</code>. En cierto modo se podr\u00eda decir que act\u00faa a modo de registro del sistema.</p> <p>Podr\u00eda decirse que el directorio <code>/var</code> es la contraparte \"escriturable\" del directorio <code>/usr</code>, que debe ser de solo lectura en el funcionamiento normal. Los archivos de registro y todo lo dem\u00e1s que normalmente se escribir\u00eda en <code>/usr</code> durante el funcionamiento normal se escriben en el directorio <code>/var</code>. </p>"},{"location":"warm/Apuntes_Linux/#directorio-home","title":"Directorio home","text":"<p>El directorio <code>/home</code> contiene una carpeta de inicio para cada usuario. Por ejemplo, si el nombre de usuario es raul, habr\u00e1 una carpeta de inicio ubicada en <code>/home/raul</code>. Esta carpeta de inicio contiene los archivos de datos del usuario y los archivos de configuraci\u00f3n espec\u00edficos del usuario (configuraciones de programas, por ejemplo). </p> <p>Cada usuario solo tiene acceso de escritura \u00fanicamente a su propia carpeta de inicio y debe convertirse en root para poder tener privilegios que le permitan modificar otros archivos en el sistema.</p> <p>Para visualizar los ficheros ocultos dentro del directorio individual de cada usuario, se puede usar la combinaci\u00f3n de comandos CTRL + H en modo gr\u00e1fico. Todos los archivos y carpetas ocultas en Linux empiezan por un punto, seguido del nombre.</p> <p>En muchas distribuciones es una pr\u00e1ctica recomendada el hecho de ubicar el directorio <code>/home</code> es una partici\u00f3n separada del resto, por tal de facilitar que, en caso de reinstalar el sistema operativo, puedas mantener intacta la partici\u00f3n de la <code>/home</code>, y de este modo mantener todos los archivos personales.</p>"},{"location":"warm/Apuntes_Linux/#usuarios-y-grupos","title":"Usuarios y grupos","text":"<p>Un usuario es cualquiera que use un ordenador. En este caso, estamos describiendo los nombres que representan a esos usuarios. Puede ser Pol o Mart\u00ed, y pueden usar los nombres superc0der o Pirate en lugar de su nombre real. Lo \u00fanico que importa es que la computadora tenga un nombre para cada cuenta que cree, y es este nombre por el que una persona obtiene acceso para usar la computadora. Algunos servicios del sistema tambi\u00e9n se ejecutan utilizando cuentas de usuario restringidas o privilegiadas.</p> <p>La administraci\u00f3n de los usuarios se realiza con fines de seguridad al limitar el acceso de ciertas maneras espec\u00edficas. El superusuario (root) tiene acceso completo al sistema operativo y su configuraci\u00f3n; est\u00e1 destinado solo para uso administrativo. Los usuarios sin privilegios pueden usar los programas su y sudo para la escalada de privilegios controlada.</p> <p>Cualquier persona puede tener m\u00e1s de una cuenta, siempre que utilicen un nombre diferente para cada una de ellas. Adem\u00e1s, hay algunos nombres reservados que no se pueden usar, como \u00abroot\u00bb.</p> <p>Los usuarios pueden aglutinarse en un \u00abgrupo\u00bb y, del mismo modo, pueden a\u00f1adirse a un grupo existente para utilizar el acceso privilegiado que dicho grupo concede. </p> <p>Los grupos de usuarios juegan un papel esencial en los sistemas Linux. Gracias a ellos tenemos una manera muy f\u00e1cil de seleccionar grupos de usuarios a los que se les permite compartir archivos entre ellos. Tambi\u00e9n proporcionan a los administradores de sistemas una manera m\u00e1s efectiva y sencilla de gestionar los privilegios de los usuarios puesto que permiten asignar privilegios a grupos completos en lugar de a usuarios individuales.</p>"},{"location":"warm/Apuntes_Linux/#permisos","title":"Permisos","text":"<p>Aunque hay multitud de caracter\u00edsticas de seguridad integradas en los sistemas basados \u200b\u200ben Linux, puede existir una vulnerabilidad potencial muy importante cuando se otorga el acceso al sistema a los usuarios. Pueden aparecer problemas cuando no se han asignado los permisos adecuados a los archivos y directorios.</p>"},{"location":"warm/Apuntes_Linux/#grupos-de-permisos","title":"Grupos de permisos","text":"<p>Cada archivo y directorio tiene tres grupos de permisos basados \u200b\u200ben usuarios:</p> <ul> <li> <p>Propietario: los permisos de propietario se aplican solo al propietario del archivo o directorio, no afectar\u00e1n las acciones de otros usuarios.</p> </li> <li> <p>Grupo: los permisos de grupo se aplican solo al grupo que se ha asignado al archivo o directorio, no afectar\u00e1n las acciones de otros usuarios.</p> </li> <li> <p>Todos los usuarios: los permisos de todos los usuarios se aplican a todos los dem\u00e1s usuarios del sistema; este es el grupo de permisos que m\u00e1s desea ver.</p> </li> </ul>"},{"location":"warm/Apuntes_Linux/#tipos-de-permisos","title":"Tipos de permisos","text":"<p>Cada archivo o directorio tiene tres tipos de permisos b\u00e1sicos:</p> <ul> <li> <p>Lectura (read/r): el permiso de lectura se refiere a la capacidad de un usuario para leer el contenido del archivo. El permiso de lectura en un directorio permite listar su contenido.</p> </li> <li> <p>Escritura (write/w): los permisos de escritura se refieren a la capacidad de un usuario para escribir o modificar un archivo. En un directorio permite crear, eliminar o modificar el nombre de un archivo. En un hipot\u00e9tico caso donde tuvi\u00e9ramos permiso de escritura en un archivo pero no en el directorio en el que est\u00e1 ubicado, podr\u00edamos modificar el contenido del archivo pero no su nombre, ni moverlo de sitio, ni eliminarlo del directorio.</p> </li> <li> <p>Ejecuci\u00f3n (execution/x): el permiso de ejecuci\u00f3n afecta la capacidad de un usuario para ejecutar un archivo o ver el contenido de un directorio.</p> </li> </ul> <p></p> <p></p> <p>Tip</p> <p>Podemos inspeccionar con detalle los permisos de arhivos y directorios con el comando:</p> <pre><code>ls -l\n</code></pre> <p></p>"},{"location":"warm/Apuntes_Linux/#como-se-cambian-los-permisos-en-linux","title":"\u00bfC\u00f3mo se cambian los permisos en Linux?","text":"<p>Para cambiar los permisos de archivos y directorios en GNU/Linux, disponemos de 3 comandos principales:</p> <ul> <li>chmod: cambiar permisos del archivo o directorio:         <pre><code>chmod [permisos][archivo/directorio][opciones]\n</code></pre></li> <li>chown: cambiar el propietario del archivo o directorio:         <pre><code>chown [nuevo usuario propietario][archivo/directorio][opciones]\n</code></pre></li> <li>chgrp: cambiar el grupo del archivo o directorio:         <pre><code>chgrp [nuevo grupo][archivo/directorio][opciones]\n</code></pre></li> </ul> <p>Existen dos formas de cambiar los permisos de archivos y directorios en Linux:</p> <ul> <li>Modo simb\u00f3lico: con notaci\u00f3n basada en caracteres</li> <li>Modo absoluto: con notaci\u00f3n num\u00e9rica, seg\u00fan el sistema octal o en base 8, cuyos valores de forma resumida puedne verse en la imagen a continuaci\u00f3n:</li> </ul> <p></p> <p>As\u00ed pues, una tabla resumen en cu\u00e1nto a los permisos vistos, ser\u00eda la siguiente:</p> Valor Permisos Descripci\u00f3n 0 --- Sin permisos 1 --x Ejecuci\u00f3n 2 -w- Lectura 3 -wx Lectura + ejecuci\u00f3n 4 r-- Lectura 5 r-x Lectura + ejecuci\u00f3n 6 rw- Lectura + escritura 7 rwx Lectura + escritura + ejecuci\u00f3n <p>Los permisos utilizando la notaci\u00f3n num\u00e9rica en sistema octal, se asignan en tuplas de 3 (usuario/grupo/otros) y no es posible asignar s\u00f3lo para uno o dos de los elementos de la tupla.</p> <p>Algunos ejemplos de permisos en modo absoluto son:</p> Notaci\u00f3n Significado rw------- (600) Permisos de lectura y escritura s\u00f3lo para el propietario rw-r--r-- (644) Permisos de lectura y escritura s\u00f3lo para el propietario y s\u00f3lo de lectura para el grupo y resto de usuarios rwxr-xr-x (755) Permisos de lectura, escritura y ejecuci\u00f3n para el usuario y de lectura y ejecuci\u00f3n para el grupo y resto de usuarios rwxrwxrwx (777) Usuario, grupo y resto de usuarios tienen todos los permisos sobre el fichero o directorio (\u00a1Cuidado!) rw-rw-rw- (666) Usuario, grupo y resto de usuarios pueden leer y escribir sobre el fichero o directorio(\u00a1cuidado!) <p>Como ya hemos dicho es el comando chmod el utilizado en el terminal para cambiar los permisos de los usuarios. Puede usarse tanto con el modo absoluto como con el simb\u00f3lico.</p> <p>Un ejemplo para el formato absoluto ser\u00eda:</p> <p><pre><code>chmod 600 archivo/directorio\n</code></pre> Y para  el formato con caracteres</p> <p><pre><code>chmod ugo+rw archivo/directorio\n</code></pre> Donde, en este \u00faltimo caso, los permisos rwx (lectura/escritura/ejecuci\u00f3n) pueden asignarse a: </p> <p>u - propietario</p> <p>g - grupo</p> <p>o - otros</p> <p>a - todos los usuarios 000 Si utilizamos el operador + estaremos agregando permisos, si usamos el - los eliminaremos:</p> <pre><code>chmod a-rw archivo1\nchmod u+rwx archivo2\n</code></pre> <p>Ejemplos pr\u00e1cticos del uso de chmod para cambiar permisos de un archivo. Podemos utilizar tanto la forma absoluta, como la simb\u00f3lica:</p> Modo absoluto Modo simb\u00f3lico Resultado chmod 700 archivo.gpg chmod u+rwx -rwx------ chmod 555 chmod ugo+rx -r-xr-xr-x chmod 666 -chmod ugo+rw rw-rw-rw-"},{"location":"warm/Apuntes_Linux/#permisos-avanzados","title":"Permisos avanzados","text":"<p>En GNU/Linux, adem\u00e1s de los 3 que hemos visto anteriormente, todav\u00eda existen otros tres permisos especiales adicionales que veremos a continuaci\u00f3n.</p>"},{"location":"warm/Apuntes_Linux/#bit-setuid","title":"Bit setuid","text":"<p>En Linux, de forma predeterminada, cuando un usuario ejecuta un archivo, el archivo se inicia con los privilegios del usuario que lo ejecuta. Sin embargo, este comportamiento se puede cambiar si establecemos permisos especiales en archivos ejecutables.</p> <p>Setuid significa \"establecer ID de usuario\". Si configuramos el bit setuid en un archivo ejecutable, el archivo siempre se ejecuta con los privilegios del propietario del archivo, sin importar qui\u00e9n lo inicie. </p> <p>El bit setuid solo tiene sentido si est\u00e1 configurado en archivos ejecutables. No hay ning\u00fan significado pr\u00e1ctico si configuramos el bit setuid en un archivo o directorio no ejecutable.</p> <p>El comando passwd es un ejemplo con este bit especial aplicado:</p> <p><pre><code>$ ls -l /bin/passwd\n-rwsr-xr-x 1 root root 63624 Dec 15 21:06 /bin/passwd\n</code></pre> Observamos que el permiso de ejecuci\u00f3n para el propietario es una \"s\" min\u00fascula en lugar de la \"x\" habitual. Esta \"s\" indica que el archivo tiene el bit setuid establecido. El comando passwd siempre se ejecutar\u00e1 con  privilegios de root sin importar qui\u00e9n lo inicie porque el propietario del archivo es root.</p> <p>Como ya sabemos, podemos usar el comando chmod para establecer el  bit setuid en un archivo:</p> <p><pre><code>chmod u+s archivo\n</code></pre> S\u00f3lo el propietario el archivo o el usuario o el usuario root puede establecer el bit *setuid*</p> <p>Un ejemplo pr\u00e1ctico de c\u00f3mo configurar este bit setuid en un archivo, de forma simb\u00f3lica:</p> <p><pre><code>$ ls -l archivo\n-rwxr-xr-x 1 raul raul 0 Feb 2 12:22 archivo\n$ chmod u+s archivo\n$ ls -l archivo    \n-rwsr-xr-x 1 raul raul 0 Feb  2 12:22 archivo\n</code></pre> En el modo absoluto, anteponemos un 4 a los permisos para indicar este bit:</p> <pre><code>$ chmod 4755 archivo\n-rwsr-xr-x 1 raul raul 0 Feb  2 12:22 archivo\n</code></pre> <p>Y para quitar este bit, en ambos modos:</p> <p><pre><code>$ chmod u-s archivo\n$ ls -l archivo\n-rwxr-xr-x 1 raul raul 0 Feb  2 12:22 archivo\n</code></pre> y</p> <pre><code>$ chmod 0755 archivo\n$ ls -l archivo\n-rwxr-xr-x 1 raul raul 0 Feb  2 12:22 archivo\n</code></pre> <p>Riesgo de seguridad</p> <pre><code>El bit setuid podr\u00eda ser bastante \u00fatil en varias aplicaciones. Sin embargo, debemos tener cuidado al establecer esos permisos especiales, ya que pueden crear problemas de seguridad.\n\nPor ejemplo, un usuario normal puede obtener privilegios de superusuario ejecutando un programa que establece el UID  como root y realizar una escalada de privilegios.\n</code></pre>"},{"location":"warm/Apuntes_Linux/#bit-setgid","title":"Bit setgid","text":""},{"location":"warm/Apuntes_Linux/#bit-setgid-en-un-archivo","title":"Bit setgid en un archivo","text":"<p>setgid es la abreviatura de \"set group id\". Si configuramos el bit setgid en un archivo ejecutable, no importa qui\u00e9n inicie el archivo, se ejecuta con los privilegios del grupo propietario.</p> <p>El comando de localizaci\u00f3n es un ejemplo de un archivo con el conjunto de bits setgid :</p> <p><pre><code>$ ls -l /usr/bin/locate\n-rwxr-sr-x 1 root locate 43048 Nov 13 18:09 /usr/bin/locate\n</code></pre> Similar al  bit setuid , notamos una \"s\" min\u00fascula en la salida de ls , excepto que est\u00e1 en la secci\u00f3n de grupo en lugar de en la secci\u00f3n de propietario.</p> <p>Para establecer este bit de modo simb\u00f3lico podemos utilizar:</p> <pre><code>$ ls -l archivo2 \n-rwxr-xr-x 1 raul raul 0 Feb 2 22:35 archivo2\n$ chmod g+s archivo2\n$ ls -l archivo2\n-rwxr-sr-x 1 raul raul 0 Feb 2 22:35 archivo2\n</code></pre> <p>Y de modo absoluto, anteponiendo un dos a los permisos:</p> <pre><code>chmod 2755 archivo2\n</code></pre>"},{"location":"warm/Apuntes_Linux/#bit-setgid-en-un-directorio","title":"Bit setgid en un directorio","text":"<p>Si configuramos el bit setgid en un directorio, todos los archivos y subdirectorios reci\u00e9n creados en el directorio heredar\u00e1n el grupo de ese directorio. Sin embargo, los archivos y directorios existentes no aplicar\u00e1n el cambio de grupo.</p> <p>Veamos un ejemplo para aclarar este comportamiento.</p> <p>Primero, preparamos un directorio padre que contiene dos archivos:</p> <p><pre><code>$ ls -ld padre\ndrwxrwxrwx 2 root raul 4096 Feb  3 00:33 padre/\n$ ls -l padre\ntotal 2\n-rwxr-xr-x 1 invitado invitado    0 Feb  3 00:30 existing_grp_invitado1\n-rwxr-xr-x 1 invitado invitado    0 Feb  3 00:30 existing_grp_invitado2\n</code></pre> padre es propiedad del usuario root y del grupo raul. Contiene dos archivos e invitado es due\u00f1o de ambos.</p> <p>A continuaci\u00f3n, establezcamos el bit setgid en padre usando chmod:</p> <pre><code>root# chmod g+s padre\nroot# ls -ld padre\ndrwxrwsrwx 2 root raul 4096 Feb  3 00:33 padre/\n</code></pre> <p>Ahora, vamos a crear un nuevo archivo y un subdirectorio bajo el padre con root:</p> <pre><code>root# touch padre/nuevo_root\nroot# mkdir padre/nuevo_dir_root```\n</code></pre> <p>Luego, verificaremos los propietarios del grupo de todos los archivos y subdirectorios en padre:</p> <p><pre><code>root# ls -l padre\ntotal 4\n-rwxr-xr-x 1 invitado invitado    0 Feb  3 00:30 grp_exist_invitado1\n-rwxr-xr-x 1 invitado invitado    0 Feb  3 00:30 grp_exist_invitado2\ndrwxr-sr-x 2 root  raul  4096 Feb  3 00:54 nuevo_dir_root/\n-rw-r--r-- 1 root  raul     0 Feb  3 00:54 nuevo_arch_root\n</code></pre> En la salida anterior, vemos que los dos archivos existentes no han cambiado despu\u00e9s de que establecemos el bit setuid en padre.</p> <p>Sin embargo, el archivo y el subdirectorio reci\u00e9n creados son propiedad de raul en lugar de  root , aunque root los cre\u00f3. Esto se debe a que el padre ten\u00eda establecido el bit setgid , y los archivos y directorios reci\u00e9n creados bajo \u00e9l heredaron el grupo del padre.</p>"},{"location":"warm/Apuntes_Linux/#sticky-bit","title":"Sticky bit","text":"<p>La misi\u00f3n del sticky bit es proteger los archivos dentro de un directorio. Si configuramos el sticky bit en un directorio, un archivo en este directorio solo se puede eliminar mediante una de las siguientes opciones:</p> <ul> <li>El due\u00f1o del archivo</li> <li>El due\u00f1o del directorio</li> <li>El  usuario root</li> </ul> <p>En otras palabras, este permiso especial evita que un usuario elimine los archivos de otros usuarios en un directorio p\u00fablico.</p> <p>Un ejemplo t\u00edpico de sticky bit del mundo real es el directorio /tmp:</p> <p><pre><code>$ ls -ld /tmp\ndrwxrwxrwt 24 root root 980 Feb  3 21:41 /tmp/\n</code></pre> Debido a la \"w\" en la secci\u00f3n de permisos \"otros\", sabemos que cualquier usuario puede crear y eliminar cualquier archivo en el directorio /tmp .</p> <p>Pero si leemos la salida de ls anterior con atenci\u00f3n, vemos que el bit de permiso de ejecuci\u00f3n en la secci\u00f3n \"otro\" es una \"t\" min\u00fascula, en lugar de la \"x\" habitual.</p> <p>Esta \"t\" en min\u00fascula indica que el  directorio / tmp tiene el bit fijo establecido. Con el sticky bit, cualquier usuario a\u00fan puede crear archivos bajo /tmp. Sin embargo, un usuario solo puede eliminar archivos de su propiedad.</p>"},{"location":"warm/Apuntes_Linux/#el-sticky-bit-en-un-directorio","title":"El sticky bit en un directorio","text":"<p>Para establecer el sticky bit en un directorio, a\u00fan podemos usar el  comando chmod con el modo + t :</p> <pre><code>chmod +t DIRECTORIO\n</code></pre> <p>De otra forma, tambi\u00e9n podemos anteponer un \"1\" al modo de un directorio para establecer el sticky bit:</p> <p><pre><code>chmod 1777 DIRECTORIO\n</code></pre> Tambi\u00e9n podemos eliminar el sticky bit de un directorio usando -t :</p> <pre><code>chmod -t DIRECTORIO\n</code></pre> <p>Como de costumbre, veamos un ejemplo para comprender c\u00f3mo el sticky bit puede proteger los archivos de un directorio y c\u00f3mo configurar y eliminar el sticky bit en un directorio.</p> <p>Comencemos por preparar un directorio p\u00fablico llamado p\u00fablico y permitir que todos los usuarios escriban en \u00e9l:</p> <pre><code>$ ls -ld public              \ndrwxrwxrwx 2 root root 40 Feb  3 22:22 public/\n</code></pre> <p>A continuaci\u00f3n, crearemos algunos archivos en p\u00fablico por diferentes usuarios:</p> <pre><code>$ ls -l\n-rw-r--r-- 1 invitado invitado 0 Feb  3 22:28 archivo1_invitado\n-rw-r--r-- 1 invitado invitado 0 Feb  3 22:28 archivo2_invitado\n-rw-r--r-- 1 raul  raul  0 Feb  3 22:28 archivo_raul\n</code></pre> <p>Hasta ahora, no hemos colocado el sticky bit en ninguna parte. Veamos si el usuario raul puede eliminar un archivo propiedad de un invitado:</p> <p><pre><code>raul$ rm archivo1_invitado \nrm: remove write-protected regular empty archivo 'archivo1_invitado'? y\nraul$ ls -l\n-rw-r--r-- 1 invitado invitado 0 Feb  3 22:28 archivo2_invitado\n-rw-r--r-- 1 raul  raul  0 Feb  3 22:28 archivo_raul\n</code></pre> Entonces, sin el sticky bit, podemos eliminar archivos propiedad de otros usuarios.</p> <p>Ahora, configuremos el sticky bit y veamos si hay alg\u00fan cambio:</p> <p><pre><code>root# chmod +t public\nroot# ls -ld public \ndrwxrwxrwt 2 root root 80 Feb  3 22:33 public/\nroot# su raul\nraul$ rm archivo2_invitado \nrm: remove write-protected regular empty archivo 'archivo2_invitado'? y\nrm: cannot remove 'archivo2_invitado': Operation not permitted\nraul$ ls -l \n-rw-r--r-- 1 invitado invitado 0 Feb 3 22:28 archivo2_invitado\n-rw-r--r-- 1 raul raul 0 Feb 3 22:28 archivo_raul\n</code></pre> Despu\u00e9s de configurar el sticky bit, los archivos en p\u00fablico solo pueden ser eliminados por los propietarios del archivo.</p>"},{"location":"warm/Apuntes_Linux/#contrasenas-en-linux","title":"Contrase\u00f1as en Linux","text":"<p>En este apartado se describe c\u00f3mo se implementan las contrase\u00f1as dentro del sistema operativo Unix tanto para sistemas administrados localmente como basados \u200b\u200ben red.</p>"},{"location":"warm/Apuntes_Linux/#el-archivo-etcpasswd","title":"El archivo /etc/passwd","text":"<p>Tradicionalmente, Unix usa el archivo <code>/etc/passwd</code> para realizar un seguimiento de cada usuario en el sistema. El archivo <code>/etc/passwd</code> contiene el nombre de usuario, el nombre real, la informaci\u00f3n de identificaci\u00f3n y la informaci\u00f3n b\u00e1sica de la cuenta de cada usuario. Cada l\u00ednea del archivo contiene un registro de base de datos; los campos de registro est\u00e1n separados por dos puntos (:).</p> <p>Se puede usar el comando <code>cat</code> para mostrar el archivo <code>/etc/passwd</code> del sistema. Aqu\u00ed algunas l\u00edneas de muestra de un archivo t\u00edpico:</p> <pre><code>root:x:0:1:System Operator:/:/bin/ksh\ndaemon:x:1:1::/tmp:\nuucp:x:4:4::/var/spool/uucppublic:/usr/lib/uucp/uucico\nrocio:x:181:100:Rocio Cordoba:/home/rachel:/bin/ksh\narturo:x.:182:100:Arturo Soria:/home/arlin:/bin/csh\n</code></pre> <p>Las primeras tres cuentas, root, daemon y uucp, son cuentas del sistema, mientras que roc\u00edo y arturo son cuentas para usuarios individuales.</p> <p>Alguno de los campos m\u00e1s importantes del archivo <code>/etc/passwd</code>, son:</p> Campo Contenido Roc\u00edo Nombre de usuario. x Lugar de espera para la \"contrase\u00f1a cifrada\" del usuario. Tradicionalmente, este campo almacenaba la contrase\u00f1a cifrada del usuario. Los sistemas Unix modernos almacenan contrase\u00f1as cifradas en un archivo separado (el archivo de contrase\u00f1as ocultas ) al que solo pueden acceder los usuarios privilegiados. 181 N\u00famero de identificaci\u00f3n de usuario (UID) del usuario. 100 N\u00famero de identificaci\u00f3n de grupo del usuario (GID). Rocio Cordoba Nombre completo del usuario /home/rocio Directorio de inicio del usuario. /bin/ksh Shell del usuario. <p>Las contrase\u00f1as se almacenaban tradicionalmente en el archivo /etc/passwd en un formato cifrado. Sin embargo, debido a los avances en la velocidad del procesador, las contrase\u00f1as cifradas ahora se almacenan casi universalmente en un archivo independiente, llamado /etc/shadow , que se describe m\u00e1s adelante.</p>"},{"location":"warm/Apuntes_Linux/#el-sistema-de-contrasenas-cifradas-en-unixlinux","title":"El sistema de contrase\u00f1as cifradas en Unix/Linux","text":"<p>Cuando Unix/Linux solicita su contrase\u00f1a, necesita alguna forma de determinar que la contrase\u00f1a es correcta. Muchos de los primeros sistemas inform\u00e1ticos almacenaban las contrase\u00f1as de todas sus cuentas en texto plano en un archivo. En circunstancias normales, el sistema proteg\u00eda las contrase\u00f1as de modo que solo los usuarios privilegiados y las utilidades del sistema operativo pudieran acceder a ellas. Sin embargo, bien por accidente, bien por un error de programaci\u00f3n o por un acto deliberado, un usuario no privilegiado podr\u00eda acceder al contenido de este archivo. Para muestra un bot\u00f3n:</p> <p>Cita</p> <pre><code>Una de las situaciones m\u00e1s memorables ocurri\u00f3 a principios de la d\u00e9cada de 1960 cuando un administrador del sistema en el sistema CTSS del MIT estaba editando el archivo de contrase\u00f1as y otro administrador del sistema estaba editando el mensaje diario que se imprime en el terminal de todos al iniciar sesi\u00f3n. Debido a un error de dise\u00f1o del software, los archivos temporales del editor de los dos usuarios se intercambiaron y, por lo tanto, durante un tiempo, el archivo de contrase\u00f1a se imprimi\u00f3 en cada terminal cuando se iniciaba sesi\u00f3n.\n</code></pre> <p>El peligro real que planteaban estos sistemas es que los usuarios pueden hacer copias del archivo de contrase\u00f1as y robarlas sin el conocimiento del administrador del sistema.</p> <p>Unix/Linux evitan este problema al no mantener las contrase\u00f1as reales en ninguna parte del sistema. En su lugar, Unix/Linux almacenan un valor que es generado mediante el uso de la contrase\u00f1a para cifrar un bloque de bits con una funci\u00f3n unidireccional llamada crypt(); el resultado del c\u00e1lculo se almacenaba tradicionalmente en /etc/passwd. Cuando se intenta iniciar sesi\u00f3n, el programa /bin/login no descifra la contrase\u00f1a almacenada. En su lugar, /bin/login toma la contrase\u00f1a que ingres\u00f3, la usa para transformar otro bloque de ceros y compara el bloque reci\u00e9n transformado con el bloque almacenado en el archivo /etc/passwd. Si los dos resultados cifrados coinciden, el sistema lo deja entrar.</p>"},{"location":"warm/Apuntes_Linux/#la-funcion-de-cifrado-tradicional-crypt","title":"La funci\u00f3n de cifrado tradicional crypt()","text":"<p>El algoritmo que usa crypt() tradicionalmente se basa en el Est\u00e1ndar de cifrado de datos (DES) del Instituto Nacional de Est\u00e1ndares y Tecnolog\u00eda (NIST). En funcionamiento normal, DES utiliza una clave de 56 bits (8 caracteres ASCII de 7 bits, por ejemplo) para cifrar bloques de texto original o texto sin cifrar, que resultaban tener 64 bits de longitud. Los bloques de 64 bits resultantes de texto cifrado o texto cifrado no se pueden descifrar f\u00e1cilmente al texto sin formato original sin conocer la clave original de 56 bits.</p> <p>Actualmente este algoritmo ha sido sustituido por unos mucho m\u00e1s seguros y robustos.</p>"},{"location":"warm/Apuntes_Linux/#echandole-salt","title":"Ech\u00e1ndole \"salt\"","text":"<p>A medida que los ordenadores aumentaban de potencia y los algoritmos de cifrado fueron empezando a considerarse inseguros por ello, se inventaron nuevas formas de fortificarlos. Una de ellas fue el elemento conocido como \"salt\".</p> <p>En criptograf\u00eda, la sal (en ingl\u00e9s, salt) comprende bits aleatorios que se usan como una de las entradas en una funci\u00f3n derivadora de claves. La otra entrada es habitualmente una contrase\u00f1a. La salida de la funci\u00f3n derivadora de claves se almacena como la versi\u00f3n cifrada de la contrase\u00f1a. </p> <p>En definitiva, el salt es una cadena de caracteres aleatorios que se concatenan con la contrase\u00f1a antes de cifrarla para dificultad en gran medida su descifrado por un atacante.</p> <p>Los datos con salt complican los ataques de diccionario que cifran cada una de las entradas del mismo: cada bit de salt duplica la cantidad de almacenamiento y computaci\u00f3n requeridas. Para mayor seguridad, el valor de salt se guarda en secreto, separado de la base de datos de contrase\u00f1as. Esto aporta una gran ventaja cuando la base de datos es robada, pero la salt no. </p> <p>El beneficio aportado por usar una contrase\u00f1a con salt es que un ataque simple de diccionario contra los valores cifrados es impracticable si la salt es lo suficientemente larga.</p> <p>As\u00ed el formato del contenido del archivo /etc/shadow es:</p> <p></p> <p>El campo a la derecha del nombre de usuario indica qu\u00e9 algoritmo se ha utilizado para cifrar la contrase\u00f1a junto con el salt del tercer campo. Por curiosidad, algunos de estos algorimos son:</p> Valor Algoritmo $1$ MD5 $2a$ Blowfish $2y$ Blowfish $5$ SHA-256 $6$ SHA-512 <p>Los signos del d\u00f3lar delimitan estos dos campos.</p>"},{"location":"warm/Apuntes_Linux/#principales-comandos-para-manejarse-en-el-terminal","title":"Principales comandos para manejarse en el terminal","text":""},{"location":"warm/Apuntes_Linux/#crear-archivos-y-directorios","title":"Crear archivos y directorios","text":"<p>A modo de tutorial, puede ser interesante seguir los comandos que aqu\u00ed se muestran. Para ello, en primer lugar vamos a crear un subdirectorio dentro del directorio /tmp y nos ubicaremos dentro de ese subdirectorio:</p> <pre><code>mkdir /tmp/tutorial\ncd /tmp/tutorial\n</code></pre> <p>El comando mkdir es una abreviatura de \"make directory\" y se utiliza para crear nuevos directorios vac\u00edos. Permite incluso crear varios directorios en un s\u00f3lo comando utilizando el n\u00famero de par\u00e1metros o argumentos adecuado:</p> <p><pre><code>mkdir dir1 dir2 dir3\n</code></pre> Si quisi\u00e9ramos listar los directorios creados, podr\u00edamos utilizar el comando para ello:</p> <p><pre><code>ls\n</code></pre> </p> <p>Podr\u00edamos incluso darle una vuleta de tuerca al comando. Ya que los directorios que crea est\u00e1n vac\u00edos, pero si quisi\u00e9ramos crear una carpeta con subdirectorios en su interior utilizando un \u00fanico comando, har\u00edamos:</p> <p><pre><code>mkdir -p dir4/dir5/dir6\nls\n</code></pre> El \"-p\" es lo que se conoce como un switch, que no son m\u00e1s que distintas opciones para modificar el comportamiento de un comando.</p> <p>Y podr\u00edamos movernos por los subdirectorios para comprobar que, efectivamente, se han creado:</p> <pre><code>cd dir4\nls\ncd dir5\nls\ncd ../..\n</code></pre> <p>Ahora ya sabemos c\u00f3mo crear varios directorios simplemente pas\u00e1ndolos como argumentos separados al comando mkdir. Pero supongamos que queremos crear un directorio con un espacio en el nombre. Vamos a intentarlo:</p> <p><pre><code>mkdir otro directorio\nls\n</code></pre> Pod\u00e9is intentar escribir esto en el terminal o, si s\u00f3is un poco suspicaces, os habr\u00e9is dado cuenta de lo que pasar\u00e1. Exactamente, se crearan dos directorios distintos.</p> <p>Si queremos trabajar con espacios en nombres de archivos o directorios, necesitamos \"escaparlos\". \u00c9ste es un termino inform\u00e1tico que hace referencia a c\u00f3digos especiales para decirle a la m\u00e1quina que determinados caracteres y s\u00edmbolos los trate de forma diferente a lo normal. Como ejemplo:</p> <p><pre><code>mkdir \"carpeta 1\"\nmkdir 'carpeta 2'\nmkdir carpeta\\ 3\nmkdir \"carpeta 4\" \"carpeta 5\"\nmkdir -p \"carpeta 6\"/\"carpeta 7\"\nls\n</code></pre> Todos estos comandos crear\u00e1n carpetas independientes y con espacios en los nombres. Debido a lo engorroso de tener que escapar este tipo de caracteres cada vez que se utilizan en el terminal, la tendencia es usar nombres sin espacios, sustituyendo estos por guiones (\"-\") o guiones bajos (\"_\")</p>"},{"location":"warm/Apuntes_Linux/#creando-archivos-usando-la-redireccion","title":"Creando archivos usando la redirecci\u00f3n","text":"<p>Supongamos que quisi\u00e9ramos capturar la salida del comando \"ls\" como un archivo de texto que podemos manipular con posterioridad. Todo lo que tenemos que hacer es agregar el car\u00e1cter mayor que (\u201d&gt;\u201d) al final de nuestra l\u00ednea de comando, seguido del nombre del archivo en el que escribir:</p> <p><pre><code>ls &gt; salida.txt\n</code></pre> No se imprimir\u00e1 nada por pantalla puesto que hemos redirigido la salida del comando al archivo salida.txt. En todo caso, podemos utilizar el comando \"cat\" para ver el contenido del archivo:</p> <pre><code>cat output.txt\n</code></pre> <p>Otro ejemplo de redirecci\u00f3n podr\u00edamos llevarlo a cabo utilizando el comando \"echo\", el cual simplemente imprime por pantalla los argumentos que recibe. Sin embargo, podr\u00edamos redirigir la salida a un archivo y crear ficheros nuevos:</p> <p><pre><code>echo \"Esto es una prueba\" &gt; test_1.txt\necho \"Esto es otra prueba\" &gt; test_2.txt\necho \"Otra prueba m\u00e1s\" &gt; test_3.txt\nls\n</code></pre> Y para ver el contenido de los archivos podemos utilizar nuevamente \"cat\". Incluso podr\u00edamos pasarle el nombre de los 3 archivos simult\u00e1nemamente como argumentos:</p> <p><pre><code>cat test_1.txt test_2.txt test_3.txt\n</code></pre> Cuando desee pasar varios nombres de archivo a un solo comando, existen algunos atajos \u00fatiles que pueden ahorrarle mucho escribir si los archivos tienen nombres similares. Se puede utilizar un signo de interrogaci\u00f3n (\"?\") Para indicar \"cualquier car\u00e1cter\" dentro del nombre del archivo. Se puede utilizar un asterisco (\u201d*\u201d) para indicar \u201ccero o m\u00e1s caracteres\u201d. A veces se los denomina caracteres \"comod\u00edn\". Un par de ejemplos pueden ayudar, los siguientes comandos hacen lo mismo:</p> <pre><code>cat test_1.txt test_2.txt test_3.txt\ncat test_?.txt\ncat test_*\n</code></pre> <p>Atenci\u00f3n</p> <pre><code>Precisamente por los car\u00e1cteres comod\u00edn en los comandos, tampoco es recomendable usar signos de puntuaci\u00f3n en los nombres de los archivos, de otra forma habr\u00eda que \"escapar\" estos caracteres a la hora de trabajar en la l\u00ednea de comandos con los nombres de los archivos\n</code></pre> <p>Observando la salida de <code>ls</code>, se puede ver que los \u00fanicos archivos o carpetas que comienzan por \"t\" son los tres archivos de prueba que acabamos de crear, por lo que incluso se podr\u00eda simplificar ese \u00faltimo comando a\u00fan m\u00e1s <code>cat t*</code>, lo que significa \"concatenar todos los archivos cuyos nombres comienzan con una t y van seguidos de cero o m\u00e1s caracteres \u201d. Usemos esta capacidad para unir todos nuestros archivos en un solo archivo nuevo y luego verlo:</p> <pre><code>cat t* &gt; combinado.txt\ncat combinado.txt\n</code></pre> <p>Hay que tener cuidado puesto que la shell borra todo el contenido del archivo antes de escribir la salida del comando <code>cat</code> en \u00e9l. Debido a esto, debe tener mucha precauci\u00f3n al usar la redirecci\u00f3n para asegurarse de no sobrescribir accidentalmente un archivo que necesita. Si lo que queremos es a\u00f1adir al final del archivo en lugar de reemplazar el contenido del mismo, debemos poner un doble s\u00edmbolo de \"mayor que\":</p> <pre><code>cat t* &gt;&gt; combinado.txt\necho \"\u00a1He a\u00f1adido una l\u00ednea!\" &gt;&gt; combinado.txt\ncat combinado.txt\n</code></pre> <p>Cuando el contenido del archivo es mayor de lo que se puede mostrar en la terminal, se necesita utilizar lo que se conoce como pager para que pagine la salida por el terminal. El pager m\u00e1s antiguo era <code>more</code> porque colocaba una l\u00ednea de texto que dec\u00eda \"--More--\" para indicar que a\u00fan hab\u00eda contenido por mostrar. </p> <p>Posteriormente surgi\u00f3 el pager <code>less</code> con el fin de reemplazar a <code>more</code>.</p> <p><pre><code>less archivo_muy_largo.txt\n</code></pre> Al examinar un archivo utilizando <code>less</code>, se pueden utilizar las teclas de flecha arriba, flecha abajo, Re P\u00e1g, Av P\u00e1g, Inicio y Fin para desplazarse a trav\u00e9s del fichero.</p>"},{"location":"warm/Apuntes_Linux/#a-proposito-de-las-mayusculas-y-minusculas","title":"A prop\u00f3sito de las may\u00fasculas y min\u00fasculas","text":"<p>Los sistemas Unix son \"case sensitive\", es decir, distinguen entre may\u00fasculas y min\u00fasculas, es decir, consideran que \u201cA.txt\u201d y \u201ca.txt\u201d son dos archivos diferentes. Ejecutando los siguientes comandos se terminar\u00eda con tres archivos distintos:</p> <p><pre><code>echo \"Con minusculas\" &gt; a.txt\necho \"Con mayusculas\" &gt; A.TXT\necho \"Ambas mezcladas\" &gt; A.txt\n</code></pre> Se debe tener precauci\u00f3n con esto puesto que Windows es \"case insensitive\" y no distinguir\u00eda entre esos tres archivos, los tratar\u00eda como uno solo.</p> <p>Buenas pr\u00e1cticas de nomenclatura</p> <p>Cuando se considera tanto la distinci\u00f3n entre may\u00fasculas y min\u00fasculas como el escape, una buena regla general es mantener los nombres de los archivos en min\u00fasculas, con solo letras, n\u00fameros, guiones bajos y guiones. </p> <p>Adem\u00e1s, aunque en linux los archivos no tienen extensi\u00f3n, se la pondremos con el fin de facilitar el trabajo.</p>"},{"location":"warm/Apuntes_Linux/#moviendo-y-manipulando-archivos","title":"Moviendo y manipulando archivos","text":"<p>Ahora que ya hemos aprendido a crear archivos, vemos que tareas comunes podemos realizar con ellos.</p> <p>Por ejemplo, si queremos mover nuestro archivo combinado.txt al directorio dir1, usando el comando <code>mv (move)</code>:</p> <p><pre><code>mv combinado.txt dir1\n</code></pre> Para confirmar que el comando se ha ejecutado con \u00e9xito podemos utilizar el comando <code>ls</code> para ver que el fichero ya no est\u00e1 en el directorio de trabajo, luego con  <code>cd dir1</code> cambiar a ese directorio, hacer  <code>ls</code> para ver que ahora el fichero est\u00e1 all\u00ed, y luego <code>cd ..</code> para movernos al directorio de trabajo nuevamente. </p> <p>**Los dos puntos nos permiten indicarle a un comando el directorio inmediatamente superior al que estamos. ** O tambi\u00e9n podemos ahorrarnos la mayor parte de este trabajo de escritura pasando una ruta directamente al comando <code>ls</code> consultar directamente el contenido de ese directorio:</p> <p><pre><code>ls dir1\n</code></pre> Si ahora quisi\u00e9ramos devolver el archivo combinado.txt al directorio padre, tendr\u00edamos dos opciones:</p> <ul> <li> <p>Entrar en <code>dir1</code> con <code>cd</code> y usar <code>mv combinado.txt ..</code>. </p> </li> <li> <p>De la misma manera que dos puntos ( ..) representan el directorio padre, por lo que .se puede usar un solo punto ( ) para representar el directorio de trabajo actual Como sabemos que solo hay un archivo en <code>dir1</code> , podemos usar \u201c*\u201d para que coincida con cualquier nombre de archivo en ese directorio, ahorr\u00e1ndonos escribir m\u00e1s comandos. Nuestro comando para mover el archivo de nuevo al directorio de trabajo se convierte en esto (se debe tener en cuenta el espacio antes del punto, ya que hay dos par\u00e1metros que se pasan a <code>mv</code>):</p> </li> </ul> <pre><code>mv dir1/* .\n</code></pre> <p>El comando <code>mv</code> nos permite mover m\u00e1s de un fichero a la vez.  Si se le pasa m\u00e1s de dos argumentos, el \u00faltimo se toma como el directorio de destino y los otros se consideran archivos (o directorios) a mover:</p> <p><pre><code>mv combinado.txt test_* dir3 dir2\nls\nls dir2\n</code></pre> Si quisi\u00e9ramos mover una vez m\u00e1s el archivo <code>combinado.txt</code> a un directorio llamado dir6, que estar\u00e1 dentro del directorio dir5, que a su vez est\u00e1 dentro del directorio dir4 y todos ellos dentro de nuestro directorio de trabajo, har\u00edamos:</p> <p><pre><code>mv dir2/combinado.txt dir4/dir5/dir6\nls dir2\nls dir4/dir5/dir6\n</code></pre> Es decir, indicando las rutas adecuadas de directorios, podremos ejecutar este tipo de comandos desde cualquier lugar en el sistema de archivos o directorios.</p> <p>Si ahora lo que quisi\u00e9ramos fuera hacer una copia del archivo <code>combinado.txt</code> en nuestro directorio de trabajo, podr\u00edamos hacer dicha copia y comprobarla con la siguiente secuencia de comandos:</p> <p><pre><code>cp dir4/dir5/dir6/combinado.txt .\nls dir4/dir5/dir6\nls\n</code></pre> Si adem\u00e1s nos vi\u00e9ramos en la necesidad de cambiarle el nombre a un archivo o carpeta, Unix interpreta este hecho como que se est\u00e1 moviendo un archivo a otro, por ello haremos uso de <code>mv</code>, como por ejemplo:</p> <p><pre><code>mv backup_combinado.txt combinado_backup.txt\nls\n</code></pre> De la misma forma, <code>mv</code> nos permite renombrar directorios:</p> <pre><code>mv \"carpeta 1\" carpeta_1\nmv \"carpeta 2\" carpeta_2\nmv \"carpeta 3\" carpeta_3\nmv \"carpeta 4\" carpeta_4\nmv \"carpeta 5\" carpeta_5\nmv \"carpeta 6\" carpeta_6\nls\n</code></pre>"},{"location":"warm/Apuntes_Linux/#eliminar-archivos-y-carpetas","title":"Eliminar archivos y carpetas","text":"<p>Ahora que ya sabemos c\u00f3mo mover, copiar y renombrar archivos y directorios, \u00fanicamente nos queda saber c\u00f3mo eliminarlos. Para ello usamos el comando <code>rm</code> (remove):</p> <p><pre><code>rm dir4/dir5/dir6/combinado.txt\n</code></pre> Adem\u00e1s de archivos, se podr\u00eda intentar eliminar directorios que no hagan falta, como por ejemplo:</p> <p></p> <p>\u00a1Wow! \u00bfA qu\u00e9 se debe ese error? Pues que por motivos de seguridad o precauci\u00f3n, a pesar de que <code>rm</code> permite elminar miles de archivos con un \u00fanico comando, no permite eliminar un directorio completo. Para ello necesitaremos el comando <code>rmdir</code>:</p> <p></p> <p>A pesar que las carpetas de la 1 a la 5 se han eliminado, las 6 nos ha dado un error. Esto es porque el comando <code>mkdir</code>, una vez m\u00e1s por motivos de precacuci\u00f3n, exige que la carpeta est\u00e9 vac\u00eda para eliminarla.</p> <p>No obstante, la tarea m\u00e1s habitual cuando realmente se est\u00e1 seguro de que se desea eliminar un directorio y todo lo que contiene, es utilizar el comando <code>rm</code> de forma recursiva, usando el switch u opci\u00f3n <code>-r</code>:</p> <p></p> <p>Recordatorio: aunque <code>rm -r</code> es r\u00e1pido y eficaz, tambi\u00e9n es peligroso. Es m\u00e1s seguro eliminar archivos expl\u00edcitamente para borrar un directorio, luego <code>cd ..</code> al padre antes de usar <code>rmdir</code> para eliminarlo.</p> <p>\u00a1Peligro!</p> <pre><code>A diferencia de las interfaces gr\u00e1ficas, ```rm``` no mueve archivos a ninguna carpeta llamada \"papelera\" o similar. En cambio, los elimina total e irrevocablemente. Se debe tener mucho cuidado con los par\u00e1metros que usa con ```rm``` para asegurarno de que solo est\u00e1n eliminando los archivos deseados. Y se debe tener especial cuidado al usar comodines, ya que es f\u00e1cil eliminar accidentalmente m\u00e1s archivos de los que se pretend\u00eda. Un car\u00e1cter \"espacio\" equivocado en el comando puede cambiarlo por completo: ```rm t*``` significa \"eliminar todos los archivos que comienzan con t\", mientras que ```rm t *``` significa \"eliminar el archivo t as\u00ed como cualquier archivo cuyo nombre conste de cero o m\u00e1s caracteres, que ser\u00eda todo en el \u00a1directorio! Si no se est\u00e1 seguro, se puede usar la opci\u00f3n ```-i(interactive opcional)``` del ```rm``` que pedir\u00e1 que se confirme la eliminaci\u00f3n de cada archivo.\n</code></pre>"},{"location":"warm/Apuntes_Linux/#un-poco-de-fontaneria-tuberias","title":"Un poco de fontaner\u00eda (tuber\u00edas)","text":"<p>A pesar de todos los avances t\u00e9cnicos de las \u00faltimas d\u00e9cadas, el texto sigue jugando un papel fundamental en la inform\u00e1tica. La suerte es que en Linux existen m\u00faltiples herramientas excepcionales para el manejo de texto.</p> <p>Comenzando con algo simple, \u00bfc\u00f3mo podr\u00edamos contar las l\u00edneas del archivo combinado.txt? Simple, con el comando <code>wc (word count)</code>, usando la opci\u00f3n <code>-l</code> con el fin de indicarle que \u00fanicamente queremos contar l\u00edneas:</p> <p><pre><code>wc -l combinado.txt\n</code></pre> De manera similar, si quisi\u00e9ramos saber cu\u00e1ntos archivos y carpetas hay en nuestro directorio home (~) y contarlos, podr\u00edamos hacer lo siguiente:</p> <p><pre><code>ls ~ | wc -l\n</code></pre> Esto es lo que se conoce como un pipe o tuber\u00eda. La l\u00ednea de comandos de Unix permite tomar la salida de un comando y con ella alimentar la entrada del siguiente comando. Esto es lo que conoce como canalizar los datos de un comando a otro y para ello se utiliza el car\u00e1cter \"|\".</p> <p>Los espacios alrededor del car\u00e1cter de tuber\u00eda no tienen importancia, este comando por ejemplo funcionar\u00eda perfectamente:</p> <p><pre><code>ls /etc|wc -l\n</code></pre> \u00a1Uf! Son bastantes archivos. Si quisi\u00e9ramos enumerarlos todos, claramente llenar\u00eda m\u00e1s de una pantalla. Como ya hemos visto anteriormente, cuando un comando produce una gran cantidad de resultados, es mejor usar <code>less</code> para verlo, y ese consejo a\u00fan se aplica cuando se usa una tuber\u00eda (recordad, presionad q para salir):</p> <p><pre><code>ls /etc | less\n</code></pre> Una vuelta de tuerca m\u00e1s ser\u00eda saber cu\u00e1ntas l\u00edneas sin repetir tiene el archivo <code>combinado.txt</code>, es decir, cu\u00e1ntas l\u00edneas son sin contar las repetidas. El comando que nos permite hacer esto en Unix es <code>uniq</code>:</p> <p></p> <p>Parece que se est\u00e1n eliminando muy pocas, si es que hay alguna, de nuestras l\u00edneas duplicadas. Para entender por qu\u00e9, necesitamos mirar la documentaci\u00f3n del comando.  La mayor\u00eda de las herramientas de l\u00ednea de comandos vienen con un breve (y a veces no tan breve) manual de instrucciones, se accede a trav\u00e9s del comando <code>man</code>. La salida se canaliza autom\u00e1ticamente a trav\u00e9s del paginador <code>less</code>, por lo que podremos movernos hacia adelante y hacia atr\u00e1s,presionando finalmente \"q\" cuando queramos salir:</p> <p><pre><code>man uniq\n</code></pre> </p> <p>El formato de las p\u00e1ginas de manual es a menudo conciso, se debe pensar en ellas m\u00e1s como una descripci\u00f3n general r\u00e1pida de un comando que como un tutorial completo. A menudo son muy t\u00e9cnicas, pero generalmente se puede omitir la mayor parte del contenido y simplemente buscar los detalles de la opci\u00f3n o el argumento en el que estamos interesados.</p> <p>La p\u00e1gina de manual de <code>uniq</code> es un ejemplo t\u00edpico, ya que comienza con una breve descripci\u00f3n de una l\u00ednea del comando, pasa a una sinopsis de c\u00f3mo usarlo y luego tiene una descripci\u00f3n detallada de cada opci\u00f3n o par\u00e1metro. Pero aunque las p\u00e1ginas de manual son invaluables, tambi\u00e9n pueden ser impenetrables. Se han de utilizar mejor cuando se necesita un recordatorio de un interruptor/switch/opci\u00f3n o par\u00e1metro en particular, en lugar de como un recurso general para aprender a usar la l\u00ednea de comandos. Sin embargo, la primera l\u00ednea de la secci\u00f3n DESCRIPCI\u00d3N responde a la pregunta de por qu\u00e9 no se han eliminado las l\u00edneas duplicadas: solo funciona en l\u00edneas coincidentes adyacentes.</p> <p>La pregunta, entonces, es c\u00f3mo reorganizar las l\u00edneas en nuestro archivo para que las entradas duplicadas est\u00e9n en l\u00edneas adyacentes. Si tuvi\u00e9ramos que ordenar el contenido del archivo alfab\u00e9ticamente, eso ser\u00eda suficiente. Unix ofrece un comando para hacer exactamente eso, <code>sort</code>. Una revisi\u00f3n r\u00e1pida del man muestra que podemos pasar un nombre de archivo directamente al comando, as\u00ed que veamos qu\u00e9 le hace a nuestro archivo:</p> <p><pre><code>sort combinado.txt | less\n</code></pre> Deber\u00edis poder ver que las l\u00edneas se han reordenado y ahora se han adecuado para conectarlas directamente con <code>uniq</code>. Finalmente podemos completar nuestra tarea de contar las l\u00edneas \u00fanicas en el archivo:</p> <pre><code>sort combinado.txt | uniq | wc -l\n</code></pre> <p>Como se puede ver, la capacidad de canalizar datos de un comando a otro, creando largas cadenas para manipular sus datos, es una herramienta poderosa. Por esta raz\u00f3n, ver\u00e9is que se usan con bastante frecuencia en las l\u00ednea de comandos. Una cadena larga de comandos puede parecer intimidante al principio, pero recordad que se puede dividir incluso la cadena m\u00e1s larga en comandos individuales (y mirar sus p\u00e1ginas de manual) para comprender mejor lo que est\u00e1 haciendo.</p>"},{"location":"warm/Apuntes_Linux/#la-linea-de-comandos-y-el-superusuario","title":"La l\u00ednea de comandos y el superusuario","text":"<p>El superusuario es, como su nombre indica, un usuario con superpoderes. En los sistemas m\u00e1s antiguos, era un usuario real, con un nombre de usuario real (casi siempre \u201croot\u201d) que pod\u00eda iniciar sesi\u00f3n como si tuviera la contrase\u00f1a. </p> <p>En cuanto a esos superpoderes: root puede modificar o eliminar cualquier archivo en cualquier directorio del sistema, independientemente de qui\u00e9n sea el propietario; root puede reescribir las reglas del firewall o iniciar servicios de red que potencialmente podr\u00edan abrir la m\u00e1quina a un ataque; root puede apagar la m\u00e1quina incluso si otras personas todav\u00eda la est\u00e1n usando. En resumen, root puede hacer casi cualquier cosa, saltando f\u00e1cilmente las salvaguardas que generalmente se implementan para evitar que los usuarios sobrepasen sus l\u00edmites.</p> <p>Por supuesto, una persona que haya iniciado sesi\u00f3n como root es tan capaz de cometer errores como cualquier otra persona. Los anales de la historia de la inform\u00e1tica est\u00e1n llenos de historias de un comando mal escrito que borr\u00f3 todo un sistema de archivos o que acab\u00f3 con un servidor esencial. Adem\u00e1s existe la posibilidad de un ataque malicioso: si un usuario inicia sesi\u00f3n como root y abandona su escritorio, no es demasiado complicado para un colega descontento saltar a su m\u00e1quina y causar estragos.</p> <p>En un esfuerzo por reducir estos problemas, muchas distribuciones de Linux comenzaron a fomentar el uso del comando <code>su</code>. Es la abreviatura de 'superuser' y nos permite cambiar a otro usuario de la m\u00e1quina sin tener que hacer logout y login de nuevo. Cuando se usa sin argumentos, asume que se desea cambiar al usuario root, pero puede pasarle un nombre de usuario para cambiar a una cuenta de usuario espec\u00edfica. Fomentando el uso de <code>su</code> el objetivo era persuadir a los administradores para que pasaran la mayor parte de su tiempo usando una cuenta normal, que s\u00f3lo cambiaran a la cuenta de superusuario cuando lo necesitaran y luego usaran el comando <code>logout</code> (o el atajo Ctrl-D ) tan pronto como fuera posible para regresar a su usuario normal.</p> <p>Al minimizar la cantidad de tiempo que se pasa conectado como root , el uso de <code>su</code> reduce la ventana de oportunidad para cometer un error catastr\u00f3fico. A pesar de eso, siendo la naturaleza humana lo que es, muchos administradores han sido culpables de dejar abiertos terminales de larga duraci\u00f3n en los que sol\u00edan hacer <code>su</code> para cambiar a la cuenta de root. En ese sentido, sufue solo un peque\u00f1o paso adelante en materia de seguridad.</p> <p>Cuando se utiliza <code>su</code>  toda la sesi\u00f3n del terminal se cambia al otro usuario. Los comandos que no necesitan acceso de root, algo tan mundano como <code>pwd</code> o <code>ls</code>, se ejecutar\u00edan bajo los auspicios y permisos del superusuario, aumentando el riesgo de que un error en el programa cause problemas importantes. Peor a\u00fan, si pierde la pista de qu\u00e9 usuario est\u00e1 actuando en cada momento, se puede eejecutar un comando que fuera bastante benigno cuando se ejecuta como usuario, pero que podr\u00eda destruir todo el sistema si se ejecuta como root .</p> <p>Es mejor deshabilitar la cuenta de root por completo y luego, en lugar de permitir sesiones de terminal de larga duraci\u00f3n con poderes peligrosos, requerir que el usuario solicite espec\u00edficamente derechos de superusuario por comando. La clave de este enfoque es un comando llamado <code>sudo</code>( \u201cswitch user and do this command\u201d).</p> <p><code>sudo</code> se utiliza para preceder a un comando que debe ejecutarse con privilegios de superusuario. Se utiliza un archivo de configuraci\u00f3n para definir qu\u00e9 usuarios pueden usar <code>sudo</code> y qu\u00e9 comandos pueden ejecutar. Cuando se ejecuta un comando como este, se le solicita al usuario su propia contrase\u00f1a, que luego se almacena en cach\u00e9 durante un per\u00edodo de tiempo (por defecto es de 15 minutos), por lo que si necesita ejecutar varios comandos de nivel de superusuario, no se le siguen pidiendo cada vez.</p> <p>Un ejemplo de todo lo comentado hasta ahora, ser\u00eda:</p> <p></p> <p>\u00a1Cuidado con sudo!</p> <pre><code>Si se indica que debe ejecutarse un comando con ```sudo```, asegur\u00e1os de comprender lo que hace el comando antes de continuar. Ejecutar con ```sudo``` le da a ese comando los mismos poderes que un superusuario.\n</code></pre>"},{"location":"warm/Apuntes_Linux/#archivos-ocultos","title":"Archivos ocultos","text":"<p>Este tipo de archivos se usan com\u00fanmente en sistemas Linux para almacenar configuraciones y/o datos de configuraci\u00f3n y generalmente se ocultan simplemente para que no abarroten la vista de sus propios archivos. No hay nada especial en un archivo o carpeta ocultos, aparte de su nombre: simplemente comenzar un nombre con un punto (\u201d.\u201d) Es suficiente para que desaparezca.</p> <p><pre><code>cd /tmp/tutorial\nls\nmv combinado.txt .combinado.txt\nls\n</code></pre> A\u00fan se puede trabajar con el archivo oculto asegur\u00e1ndose de incluir el punto cuando especifique su nombre de archivo:</p> <p><pre><code>cat .combinado.txt\nmkdir .oculto\nmv .combinado.txt .oculto\nless .oculto/.combined.txt\n</code></pre> Si se ejecuta <code>ls</code>, se ver\u00e1 que el directorio .oculto est\u00e1, como era de esperar, oculto. A\u00fan se puede enumerar su contenido usando <code>ls .hidden</code>, pero como s\u00f3lo contiene un solo archivo que est\u00e1, as\u00edmismo, oculto, no se obtendr\u00e1n muchos resultados. Sin embargo, se puede utilizar la opci\u00f3n/switch -a  del comando <code>`ls</code> para hacer que se muestre todo en un directorio, incluyendo los archivos y carpetas ocultos:</p> <pre><code>ls\nls -a\nls .hidden\nls -a .hidden\n</code></pre> <p>Estos archivos normalmente almacenan la configuraci\u00f3n personal, y es as\u00ed como los sistemas Unix siempre han ofrecido la capacidad de tener configuraciones a nivel de sistema (generalmente en /etc) que pueden ser anuladas por usuarios individuales (cortes\u00eda de archivos ocultos en su directorio de inicio).</p>"}]}